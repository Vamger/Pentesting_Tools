import socket

from IPy import IP
# Used for converting servername to IP addresses

def scan(target, port_num):
# Function which is used to define how many machines we are going to
# scan & is using the cnverted IP of a defined server/domain name
# from the function check_ip
    converted_ip = check_ip(target)
    # Using the check_ip function which is using the IP module from IPy
    # This function is used to return an IP or convert the servername/domainname to an useable IP Address
    print('\n' + '[-_0 Scanning Target] ' + str(target))
    # Showing which target we are going to iniate the scan on
    for port in range(1,port_num):
        # Looping to an port range
        scan_port(converted_ip, port)
        # Using the converted ip and port range defined within this function

def check_ip(ip):
# Function which goal is to check the IP and convert it to a 
# useable IP Address for our scan
    try:
        IP(ip)
        return(ip)
    except ValueError:
# If the user did not enter an IP Address the return code below will convert it to
# an IP and return it to other functions    
        return socket.gethostbyname(ip)

def get_banner(s):
# Does a simple banner grabbing in order to identify which service each port that are open is using
# Its defined as the default 1024 bit value, any other values wont be displayed
    return s.recv(1024)

def scan_port(ipaddress,port):
    try:
        sock = socket.socket()
        # Using the socket module but redefining it as "sock"
        sock.settimeout(0.5)
        # It will pause between each port for 0.5 before it continues to scan the next port
        sock.connect((ipaddress, port))
        # The actual code which is used to try and connection/scan based on the ip address/es & ports
        try:
            banner = get_banner(sock)
            # Creating or banner value which is created to banner grab 
            # in order find which services are used on the ports
            print('[+] Open Port ' + str(port) + ' : ' + str(banner.decode().strip('\n')))
            # Showing the banner brabbing result and refines it to a more readable 
            # output. Using decode & strip to remove unessesary characters
        except:
             print('[+] Open Port ' + str(port))
            # Show open ports even though the program does not define the services
    except:
        pass 
        # Using pass because we dont want to show closed ports

targets = input('[+] Enter Target/s To Scan (split multiple targets with ,): ')
# Asking the user for the targets to scan
port_num = int(input('[+] Enter Number Of Ports That You Want To Scan: '))


if __name__ == "__main__":
# Used if the code is run on this file. If not, it will not run the code below if imported to another file
    if ',' in targets:
    # Creating a if statement in order to to let the program know if there are multiple machines to scan.
    # This rule is based upon the user using a comma after every IP address or server name/domain name
        for ip_add in targets.split(','):
            # Rule is triggered if there is a comma of which the user is typing
            scan(ip_add.strip(' '))
            # Strips it/removes it so that the program knows its an actual ip address it can do a scan on
    else:
        scan(targets, port_num)
        # This else statement tells us that if there are less then two ip addresses to scan just scan that single address
